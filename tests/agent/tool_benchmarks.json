{
  "queries": [
    {
      "query": "What does the first 25 lines of README.md file contain?",
      "expected_tool": "Read",
      "expected_params": {
        "file_path": "{TEST_DIR}/README.md",
        "offset": 0,
        "limit": 25
      }
    },
    {
      "query": "Show me the contents of the first 10 lines of src/main.rs",
      "expected_tool": "Read",
      "expected_params": {
        "file_path": "{TEST_DIR}/src/main.rs",
        "offset": 0,
        "limit": 10
      }
    },
    {
      "query": "Could you read the first 5 lines of src/lib.rs?",
      "expected_tool": "Read",
      "expected_params": {
        "file_path": "{TEST_DIR}/src/lib.rs",
        "offset": 0,
        "limit": 5
      }
    },
    {
      "query": "Please read the first 3 lines of src/lib.rs",
      "expected_tool": "Read",
      "expected_params": {
        "file_path": "{TEST_DIR}/src/lib.rs",
        "offset": 0,
        "limit": 3
      }
    },
    {
      "query": "Can you show me all the dependencies listed in ./Cargo.toml file?",
      "expected_tool": "Read",
      "expected_params": {
        "file_path": "{TEST_DIR}/Cargo.toml",
        "offset": 0,
        "limit": 1000
      }
    },
    {
      "query": "Please find all Rust source files (*.rs) in the entire project directory.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.rs"
      }
    },
    {
      "query": "Find all JavaScript files in the project directory and its subdirectories.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.js"
      }
    },
    {
      "query": "Search for all TypeScript interface definition files (*.d.ts) in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.d.ts"
      }
    },
    {
      "query": "Find all markdown files directly in the docs directory (not in subdirectories).",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "docs/*.md"
      }
    },
    {
      "query": "Find all Rust test files that have 'test' in their name anywhere in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*test*.rs"
      }
    },
    {
      "query": "What files and directories are located directly in the project root directory?",
      "expected_tool": "LS",
      "expected_params": {
        "path": "."
      }
    },
    {
      "query": "List all files and directories in the src directory of the project.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/src"
      }
    },
    {
      "query": "Show me all files and directories inside the app/src directory of the project.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/app/src"
      }
    },
    {
      "query": "List all the files and directories in the tests directory at the project root.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/tests"
      }
    },
    {
      "query": "What files are available in the tools directory under src?",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/src/tools"
      }
    },
    {
      "query": "Create a new Python file named test.py with a simple program that prints 'Hello World'.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/test.py",
        "content": "print('Hello World')"
      }
    },
    {
      "query": "Create a basic HTML file named welcome.html with a heading element that says 'Welcome'.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/welcome.html",
        "content": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Welcome</title>\n</head>\n<body>\n  <h1>Welcome</h1>\n</body>\n</html>"
      }
    },
    {
      "query": "Create a config.json file at the project root containing an empty JSON object {}.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/config.json",
        "content": "{}"
      }
    },
    {
      "query": "Create a CSS file called style.css that sets the body background color to light gray.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/style.css",
        "content": "body {\n  background-color: lightgray;\n}"
      }
    },
    {
      "query": "Create a markdown file named TESTING.md that explains how to run the tests with cargo test.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/TESTING.md",
        "content": "# Testing Guide\n\nTo run the tests for this project, use the following command:\n\n```\ncargo test\n```"
      }
    },
    {
      "query": "Run cargo fmt to format all Rust files in the project according to Rust style guidelines.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cargo fmt"
      }
    },
    {
      "query": "Run git status to show the current state of the git repository for this project.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "git status"
      }
    },
    {
      "query": "Count the total number of lines in all Rust source files in the project.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "find . -name '*.rs' | xargs wc -l"
      }
    },
    {
      "query": "Display all environment variables currently set in the system.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "env"
      }
    },
    {
      "query": "Create a new directory called 'examples' at the root of the project.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "mkdir -p examples"
      }
    },
    {
      "query": "In the file test.txt, replace every occurrence of the word 'bug' with 'issue'.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/test.txt",
        "old_string": "bug",
        "new_string": "issue"
      }
    },
    {
      "query": "Update the version number in package.json from 1.0.0 to 1.1.0.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/package.json",
        "old_string": "\"version\": \"1.0.0\"",
        "new_string": "\"version\": \"1.1.0\""
      }
    },
    {
      "query": "Update the copyright year in the LICENSE file from 2022 to 2023.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/LICENSE",
        "old_string": "Copyright (c) 2022",
        "new_string": "Copyright (c) 2023"
      }
    },
    {
      "query": "Change the debug setting in config.json from false to true.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/config.json",
        "old_string": "\"debug\": false",
        "new_string": "\"debug\": true"
      }
    },
    {
      "query": "In the CONTRIBUTING.md file, change the contact email from contact@example.com to support@example.com.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/CONTRIBUTING.md",
        "old_string": "contact@example.com",
        "new_string": "support@example.com"
      }
    },
    {
      "query": "Find all files in the project that might contain test configuration settings.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "*test*config*",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Find all documentation files (Markdown, text, AsciiDoc, or reStructuredText) in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.{md,txt,adoc,rst}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Find all GraphQL schema files (*.graphql or *.gql) anywhere in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.{graphql,gql}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Find all configuration files with extensions like json, yaml, yml, toml, ini, or config.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.{json,yaml,yml,toml,ini,config}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Find all CSS, SCSS, and SASS stylesheets in the entire project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.{css,scss,sass}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Show me all files and directories in the tests directory to understand its structure.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/tests"
      }
    },
    {
      "query": "List all files at the root of the project directory.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Show me all the UI components in the app/src/components directory.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/app/src/components"
      }
    },
    {
      "query": "List all files and directories in the config directory of the project.",
      "expected_tool": "LS",
      "expected_params": {
        "path": "{TEST_DIR}/config"
      }
    },
    {
      "query": "Find all utility modules or files with 'util' in their name anywhere in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*util*",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Create a Makefile at the project root with targets for build, test, and clean operations.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/Makefile",
        "content": ".PHONY: build test clean\n\nbuild:\n\tcargo build --release\n\ntest:\n\tcargo test\n\nclean:\n\tcargo clean\n"
      }
    },
    {
      "query": "Create a .env file at the project root with database URL, API key, and debug settings.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/.env",
        "content": "DATABASE_URL=postgres://user:password@localhost:5432/app\nAPI_KEY=your_api_key_here\nDEBUG=true\n"
      }
    },
    {
      "query": "Create a shell script named run.sh that builds and runs the application.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/run.sh",
        "content": "#!/bin/bash\ncargo build && ./target/debug/app\n"
      }
    },
    {
      "query": "Create a README.md file for a new feature in the features/new_feature directory.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/features/new_feature/README.md",
        "content": "# New Feature\n\nThis feature provides additional functionality for the application.\n\n## Usage\n\nDescribe how to use the feature here.\n"
      }
    },
    {
      "query": "Create a basic package.json file at the project root with name, version, and scripts.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/package.json",
        "content": "{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An application\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\"\n}\n"
      }
    },
    {
      "query": "Build the Rust project in release mode using the cargo build command.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && cargo build --release"
      }
    },
    {
      "query": "Run the Rust test suite with verbose output to see detailed test results.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && cargo test -- --verbose"
      }
    },
    {
      "query": "Install all the required npm dependencies based on the package.json file.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && npm install"
      }
    },
    {
      "query": "Show the current Git branch for this repository.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && git branch --show-current"
      }
    },
    {
      "query": "Run Clippy on the Rust codebase to check for lints and potential issues.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && cargo clippy"
      }
    },
    {
      "query": "Fix the typo in README.md by changing the word 'instll' to 'install'.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/README.md",
        "old_string": "instll",
        "new_string": "install"
      }
    },
    {
      "query": "Update the MongoDB connection string in config.js from localhost:27017/app to localhost:27017/newapp.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/config.js",
        "old_string": "mongodb://localhost:27017/app",
        "new_string": "mongodb://localhost:27017/newapp"
      }
    },
    {
      "query": "Change the log level setting in logger.conf from INFO to DEBUG.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/logger.conf",
        "old_string": "level = INFO",
        "new_string": "level = DEBUG"
      }
    },
    {
      "query": "Update the commented API code in main.rs to use the new API method with additional options parameter.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/src/main.rs",
        "old_string": "// client.send_request(data)",
        "new_string": "// client.send_api_request(data, options)"
      }
    },
    {
      "query": "Update the description field in package.json to a more detailed one about the application.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/package.json",
        "old_string": "\"description\": \"An application\"",
        "new_string": "\"description\": \"Modern application with enhanced features\""
      }
    },
    {
      "query": "Calculate the total size of all JavaScript files in the project.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "find {TEST_DIR} -name '*.js' -type f -exec du -ch {} \\; | grep total$"
      }
    },
    {
      "query": "Count the total number of commits in this Git repository.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && git rev-list --count HEAD"
      }
    },
    {
      "query": "Check if port 3000 is currently being used by any process on this system.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "lsof -i :3000 || echo 'Port 3000 is not in use'"
      }
    },
    {
      "query": "Show detailed information about the operating system using the uname command.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "uname -a"
      }
    },
    {
      "query": "Check if Docker is installed and running correctly on this system.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "docker info"
      }
    },
    {
      "query": "Find all text files (*.txt) anywhere in the project directory.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.txt",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Find all shell script files with .sh or .bash extensions in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.{sh,bash}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Locate all Dockerfile files or files with Dockerfile in the name anywhere in the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/Dockerfile*",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Find all database migration files (SQL or Rust) in any migrations directory.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/migrations/**/*.{sql,rs}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Search for any backup or temporary files with extensions .bak, .backup, .swp, or .tmp.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/*.{bak,backup,swp,tmp}",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Create a docker-compose.yml file at the project root for a development environment with app and database services.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/docker-compose.yml",
        "content": "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n    environment:\n      - NODE_ENV=development\n  db:\n    image: postgres:latest\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=myapp\n"
      }
    },
    {
      "query": "Create a .gitignore file for a Rust project that excludes common files and directories that shouldn't be tracked.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/.gitignore",
        "content": "/target/\n**/*.rs.bk\nCargo.lock\n.env\n.idea/\n.vscode/\n*.swp\n*.swo\n"
      }
    },
    {
      "query": "Create a GitHub Actions workflow file for continuous integration that builds and tests the project.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/.github/workflows/ci.yml",
        "content": "name: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Build\n      run: cargo build --verbose\n    - name: Run tests\n      run: cargo test --verbose\n"
      }
    },
    {
      "query": "Create a tsconfig.json file for TypeScript configuration with strict type checking enabled.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/tsconfig.json",
        "content": "{\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.test.ts\"]\n}\n"
      }
    },
    {
      "query": "Create an ESLint configuration file with TypeScript support and common rules.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/.eslintrc.json",
        "content": "{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true,\n    \"node\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 12,\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\n    \"@typescript-eslint\"\n  ],\n  \"rules\": {\n    \"indent\": [\"error\", 2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"always\"]\n  }\n}\n"
      }
    },
    {
      "query": "Run Clippy to check if our Rust codebase follows the Rust style guide.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && cargo clippy"
      }
    },
    {
      "query": "Count the total number of files in the entire project directory.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "find {TEST_DIR} -type f | wc -l"
      }
    },
    {
      "query": "Find all files in any fixtures directories throughout the project.",
      "expected_tool": "Glob",
      "expected_params": {
        "pattern": "**/fixtures/**/*",
        "path": "{TEST_DIR}"
      }
    },
    {
      "query": "Display the full contents of the LICENSE file to review the project's license information.",
      "expected_tool": "Read",
      "expected_params": {
        "file_path": "{TEST_DIR}/LICENSE",
        "offset": 0,
        "limit": 2000
      }
    },
    {
      "query": "Run cargo clean to remove all build artifacts and clean the project's target directory.",
      "expected_tool": "Bash",
      "expected_params": {
        "command": "cd {TEST_DIR} && cargo clean"
      }
    },
    {
      "query": "Create a basic React button component file with TypeScript props interface.",
      "expected_tool": "Write",
      "expected_params": {
        "file_path": "{TEST_DIR}/app/src/components/Button.tsx",
        "content": "import React from 'react';\n\ninterface ButtonProps {\n  text: string;\n  onClick: () => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({ text, onClick }) => {\n  return (\n    <button onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n"
      }
    },
    {
      "query": "Update main.rs to use proper error handling with Result and Box<dyn Error>.",
      "expected_tool": "Edit",
      "expected_params": {
        "file_path": "{TEST_DIR}/src/main.rs",
        "old_string": "fn main() {\n    println!(\"Hello, world!\");\n}",
        "new_string": "fn main() -> Result<(), Box<dyn std::error::Error>> {\n    println!(\"Hello, world!\");\n    Ok(())\n}"
      }
    }
  ]
}
